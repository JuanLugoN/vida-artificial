/* autogenerated by Processing revision 1286 on 2022-10-16 */
import processing.core.*;

public class Langton extends PApplet {

int[][] grid;
int h, w;
int x, y;
int dir = 0;
int ANT_UP = 0;
int wcell = 7, hcell = 7;
final int ANT_RIGHT = 1;
final int ANT_DOWN = 2;
final int ANT_LEFT = 3;
Rule[] rules;
int[] colors =
  {
  0xFFFFFFFF,
  0xFF000000,
  0xFFFF0000,
  0xFF008000,
  0xFF0000FF,
  0xFF800000,
  0xFFFFFF00,
  0xFFFF00FF,
  0xFF00FFFF,
  0xFF00FF00,
  0xFF808080,
  0xFF000080,
  0xFFC0C0C0,
  0xFF008080,
  0xFF808000,
  0xFF800080
};

 public void settings() {
  if (args == null) {
    println("Por favor ingrese las reglas del automata");
    println("ejemplo $./Langton LRLRRL");
    System.exit(1);
  } else if (args[0].length() > 16) {
    println("El tamaño máximo de las reglas es de 16");
    System.exit(1);
  } else {
    char[] ch = args[0].toCharArray();
    for (int i = 0; i < ch.length; i++) {
      char c = ch[i];
      if (Character.isLetter(c) && Character.isLowerCase(c))
        ch[i] = Character.toUpperCase(c);
      if (ch[i] != 'L' && ch[i] != 'R') {
        println("Parametro incorrecto!!");
        println("Solo se admite \'L\' \'R\'");
        System.exit(1);
      }
    }
    int length = ch.length-1;
    rules = new Rule[ch.length];
    rules[length] = new Rule(length, colors[length], ch[length], null);
    for (int i = length-1; i >= 0; i--)
      rules[i] = new Rule(i, colors[i], ch[i], rules[i+1]);
    rules[length].next = rules[0];
  }
  h = (displayHeight/hcell)-20;
  w = (displayWidth/wcell)-20;
  size(w*wcell, h*hcell);
  grid = new int[w][h];
}

 public void setup() {
  x = w/2;
  y = h/2;
  grid[x][y] = 0;
}

 public void draw() {
  drawGrid();
  for (int i = 0; i < 5; i++) {
    Rule rule = rules[grid[x][y]];
    grid[x][y] = rule.next.state;
    if (rule.dir == 'L')
      turnLeft();
    else
      turnRight();
    move();
  }
}

 public void turnRight() {
  dir++;
  if (dir > ANT_LEFT) {
    dir = ANT_UP;
  }
}


// ***********************
 public void turnLeft() {
  dir--;
  if (dir < ANT_UP) {
    dir = ANT_LEFT;
  }
}

 public void move() {
  if (dir == ANT_UP) {
    y--;
  }
  if (dir == ANT_RIGHT) {
    x++;
  }
  if (dir == ANT_DOWN) {
    y++;
  }
  if (dir == ANT_LEFT) {
    x--;
  }

  if (x > w-1 || x < 0 || y > h-1 || y < 0)
    System.exit(1);
}

 public void drawGrid() {
  stroke(128);
  strokeWeight(1);
  for (int i = 0; i < w; i++) {
    for (int j = 0; j < h; j++) {
      fill(rules[grid[i][j]].c);
      rect(i*wcell, j*hcell, wcell, hcell);
    }
  }
}


private class Rule {
  private int state;
  private int c;
  private char dir;
  private Rule next;

  private Rule(int state, int c, char dir, Rule next) {
    this.state = state;
    this.c = c;
    this.dir = dir;
    this.next = next;
  }
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Langton" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
